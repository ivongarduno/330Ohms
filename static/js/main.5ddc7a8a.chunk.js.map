{"version":3,"sources":["components/LocateControl.jsx","views/MapView.jsx","views/QrReader.jsx","App.js","serviceWorker.js","index.js"],"names":["LocateControl","this","props","options","startDirectly","map","leaflet","lc","Locate","addTo","start","Component","withLeaflet","Mapa","state","lat","lng","zoom","stores","data","center","className","Map","TileLayer","attribution","url","store","Marker","position","geolocation","latitude","longitude","key","id","Popup","strings","title","onActivate","LectorQr","result","handleScan","setState","handleError","err","console","error","delay","onError","onScan","style","width","href","target","rel","App","basename","process","exact","path","component","MapView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mjeAIMA,E,4LACiB,IAAD,EACiBC,KAAKC,MAAhCC,EADU,EACVA,QAASC,EADC,EACDA,cACTC,EAAQJ,KAAKC,MAAMI,QAAnBD,IACFE,EAAK,IAAIC,IAAOL,GACtBI,EAAGE,MAAMJ,GACLD,GAEFG,EAAGG,U,+BAIL,OAAO,S,GAZiBC,aAebC,cAAYZ,G,QCbNa,E,2MACjBC,MAAQ,CAEJC,IAAK,SACLC,KAAM,QACNC,KAAM,GACNC,OAASC,K,wEAKT,IAAMC,EAAS,CAACnB,KAAKa,MAAMC,IAAKd,KAAKa,MAAME,KAS3C,OACI,yBAAKK,UAAU,iBACX,kBAACC,EAAA,EAAD,CAAKF,OAAQA,EAAQH,KAAMhB,KAAKa,MAAMG,MAClC,kBAACM,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,wDAGJxB,KAAKa,MAAMI,OAAOb,KAAI,SAAAqB,GAAK,OACvB,kBAACC,EAAA,EAAD,CAAQC,SAAW,CAAEF,EAAMG,YAAYC,SAAUJ,EAAMG,YAAYE,WAAaC,IAAMN,EAAMO,IACxF,kBAACC,EAAA,EAAD,KACMR,EAAMZ,WAKxB,kBAAC,EAAD,CAAeX,QAxBL,CAClByB,SAAU,WACVO,QAAS,CACLC,MAAO,2BAEXC,WAAY,cAmBmCjC,eAAa,U,GApCtCO,a,iBCFb2B,E,2MACjBxB,MAAQ,CACNyB,OAAQ,a,EAGVC,WAAa,SAAArB,GACPA,GACF,EAAKsB,SAAS,CACZF,OAAQpB,K,EAIduB,YAAc,SAAAC,GACZC,QAAQC,MAAMF,I,wEAGd,OACE,yBAAKtB,UAAU,MACb,kBAAC,IAAD,CACEyB,MAAO,IACPC,QAAS9C,KAAKyC,YACdM,OAAQ/C,KAAKuC,WACbS,MAAO,CAAEC,MAAO,UAElB,uBAAGC,KAAMlD,KAAKa,MAAMyB,OAAQa,OAAO,SAASC,IAAI,uBAAuBpD,KAAKa,MAAMyB,a,GAxBtD5B,a,MCgBvB2C,MAbf,WAEE,OACE,yBAAKjC,UAAY,OACb,kBAAC,IAAD,CAAQkC,SAAUC,YAChB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAQ,IAAIC,UAAcC,IACvC,kBAAC,IAAD,CAAOF,KAAQ,YAAYC,UAAcrB,OCD/BuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5ddc7a8a.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport { withLeaflet } from \"react-leaflet\";\r\nimport Locate from \"leaflet.locatecontrol\";\r\n\r\nclass LocateControl extends Component {\r\n  componentDidMount() {\r\n    const { options, startDirectly } = this.props;\r\n    const { map } = this.props.leaflet;\r\n    const lc = new Locate(options);\r\n    lc.addTo(map);\r\n    if (startDirectly) {\r\n      // request location update and set location\r\n      lc.start();\r\n    }\r\n  }\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\nexport default withLeaflet(LocateControl);\r\n","import React, { Component } from 'react'\r\nimport { Map, TileLayer , Marker, Popup} from 'react-leaflet'\r\n\r\nimport LocateControl from '../components/LocateControl'\r\nimport { data } from '../data/data.json'\r\n\r\nexport default class Mapa extends Component {\r\n    state = {\r\n\r\n        lat: 21.87982,\r\n        lng: -102.296,\r\n        zoom: 13,\r\n        stores : data,\r\n     \r\n        }\r\n    \r\n    render() {\r\n        const center = [this.state.lat, this.state.lng]\r\n        const locateOptions = {\r\n            position: 'topright',\r\n            strings: {\r\n                title: 'Show me where I am, yo!'\r\n            },\r\n            onActivate: () => {\r\n            } // callback before engine starts retrieving locations\r\n        }\r\n        return (\r\n            <div className=\"container-map\">\r\n                <Map center={center} zoom={this.state.zoom}>\r\n                    <TileLayer\r\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png\"\r\n                    />\r\n                    {\r\n                        this.state.stores.map(store => \r\n                            <Marker position={ [ store.geolocation.latitude, store.geolocation.longitude ]} key={ store.id }>\r\n                                <Popup>\r\n                                    { store.state}\r\n                                </Popup>\r\n                            </Marker>\r\n                            )\r\n                    }\r\n                    <LocateControl options={locateOptions} startDirectly />\r\n                </Map>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'; \r\nimport QrReader from 'react-qr-reader';\r\n\r\n\r\nexport default class LectorQr extends Component {\r\n    state = {\r\n      result: 'No result'\r\n    }\r\n   \r\n    handleScan = data => {\r\n      if (data) {\r\n        this.setState({\r\n          result: data\r\n        })\r\n      }\r\n    }\r\n    handleError = err => {\r\n      console.error(err)\r\n    }\r\n    render() {\r\n      return (\r\n        <div className=\"qr\">\r\n          <QrReader\r\n            delay={300}\r\n            onError={this.handleError}\r\n            onScan={this.handleScan}\r\n            style={{ width: '100%' }}\r\n          />\r\n          <a href={this.state.result} target='_blank' rel=\"noopener noreferrer\">{this.state.result}</a>\r\n          \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport MapView from './views/MapView';\r\nimport LectorQr  from './views/QrReader';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className = \"app\">\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Route exact path  = \"/\" component = { MapView }/> \r\n          <Route path  = \"/LectorQr\" component = { LectorQr }/>   \r\n        </Router>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}